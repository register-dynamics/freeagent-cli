#!/usr/bin/env ruby

require 'dotenv/load'
require 'thor'
require_relative '../lib/freeagent'

def match type, collection, needle, *values
  found = collection.select do |item|
    values.map(&:to_proc).any? {|v| v.call(item) == needle }
  end
  if found.none?
    possibles = collection.product(values).map {|item, value| value.to_proc.call(item).to_s }
    raise ArgumentError, "No #{type} matching '#{needle}' found, expecting one from #{possibles}"
  end
  unless found.one?
    raise ArgumentError, "Ambiguous #{type}: could be #{found.map(&:url).join(', ')}"
  end
  found.first
end

def select_task project, task_name
  tasks = api.tasks(project)
  if task_name.nil?
    raise ArgumentError, "Expecting only one task in project #{project.name}, found #{tasks.size}" if not tasks.one?
    tasks.first
  else
    match :task, tasks, task_name, :name
  end
end

module Freeagent
  class Timeslips < Thor
    no_commands do
      def api
        @api ||= API.new
      end
    end

    desc 'list [-U USER] [-P PROJECT [-T TASK]] [-f FROM] [-t TO]', "List timeslips"
    method_option :user, aliases: '-U', type: :string, default: nil, desc: 'Name or email of a user'
    method_option :project, aliases: '-P', type: :string, default: nil, desc: 'Name of a project'
    method_option :task, aliases: '-T', type: :string, default: nil, desc: 'Name of a task within the project'
    method_option :from, aliases: '-f', type: :string, default: nil, desc: 'Date to list timeslips from'
    method_option :to, aliases: '-t', type: :string, default: nil, desc: 'Date to list timeslips to'
    def list
      raise ArgumentError, '--project must be specified if --task if used' if options[:project].nil? && !options[:task].nil?

      from = options[:from].nil? ? nil : Date::parse(options[:from])
      to = options[:to].nil? ? nil : Date::parse(options[:to])
      user = options[:user].nil? ? nil : match(:user, api.users, options[:user], :first_name, :last_name, :email)
      project = options[:project].nil? ? nil : match(:project, api.projects, options[:project], :name)
      task = options[:task].nil? ? nil : match(:task, api.tasks(project), options[:task], :name)

      users = Hash.new {|cache, url| cache[url] = api.user url.split('/').last }
      users[user.url] = user unless user.nil?
      projects = Hash.new {|cache, url| cache[url] = api.project url.split('/').last }
      projects[project.url] = project unless project.nil?
      tasks = Hash.new {|cache, url| cache[url] = api.task url.split('/').last }
      tasks[task.url] = task unless task.nil?

      api.timeslips(user: user, project: project, task: task, from: from, to: to).each do |timeslip|
        puts [
          Date::parse(timeslip.dated_on).strftime('%a %d %b %Y'),
          users[timeslip.user].email,
          projects[timeslip.project].name,
          tasks[timeslip.task].name,
          timeslip.hours,
          timeslip.comment
        ].join("\t")
      end
    end

    desc 'create USER PROJECT [TASK [FROM [TO]]]', "Create timeslips"
    method_option :hours, aliases: '-h', type: :numeric, default: 8, desc: "Number of hours per day"
    method_option :weekends, aliases: '-w', type: :boolean, default: false, desc: "Create timeslips on Saturdays and Sundays"
    method_option :comment, aliases: '-c', type: :string, default: nil, desc: "Comment to add to any created timeslips"
    def create user, project, task = nil, from = nil, to = nil
      from = from.nil? ? Date::today : Date::parse(from)
      to = to.nil? ? from : Date::parse(to)
      user = match :user, api.users, user, :first_name, :last_name, :email
      project = match :project, api.projects, project, :name
      task = select_task project, task

      puts "Creating timeslips for #{user.first_name} #{user.last_name} for task '#{task.name}' in project '#{project.name}' between #{from} and #{to} inclusive"
      timeslips = from.step(to).map do |date|
        next if (date.saturday? || date.sunday?) && !options[:weekends]
        {'task' => task.url, 'project' => project.url, 'user' => user.url, 'dated_on' => date.to_s, 'hours' => options[:hours], 'comment' => options[:comment]}
      end.reject(&:nil?)
      api.batch_create_timeslips timeslips
    end

    desc 'fill USER PROJECT [TASK [FROM [TO]]]', 'Fill remaining hours with new timeslips'
    method_option :hours, aliases: '-h', type: :numeric, default: 8, desc: "Number of hours per day"
    method_option :weekends, aliases: '-w', type: :boolean, default: false, desc: "Create timeslips on Saturdays and Sundays"
    method_option :comment, aliases: '-c', type: :string, default: nil, desc: "Comment to add to any created timeslips"
    def fill user, project, task = nil, from = nil, to = nil
      from = from.nil? ? Date::today : Date::parse(from)
      to = to.nil? ? from : Date::parse(to)
      user = match :user, api.users, user, :first_name, :last_name, :email
      project = match :project, api.projects, project, :name
      task = select_task project, task

      existing = api.timeslips(user: user, from: from, to: to).reduce(Hash.new) do |hash, timeslip|
        date = Date::parse timeslip.dated_on
        hash.update({date => (hash[date] || 0) + timeslip.hours.to_f})
      end

      puts "Filling timeslips for #{user.first_name} #{user.last_name} up to #{options[:hours]}hrs using task '#{task.name}' in project '#{project.name}' between #{from} and #{to} inclusive"
      timeslips = from.step(to).map do |date|
        next if (date.saturday? || date.sunday?) && !options[:weekends]
        existing_hours = existing[date] || 0
        adding_hours = options[:hours] - existing_hours
        next if adding_hours <= 0

        {'task' => task.url, 'project' => project.url, 'user' => user.url, 'dated_on' => date.to_s, 'hours' => adding_hours.to_s, 'comment' => options[:comment]}
      end.reject(&:nil?)
      api.batch_create_timeslips timeslips
    end

    desc 'delete USER PROJECT TASK [FROM [TO]]', 'Delete timeslips'
    def delete user, project, task, from = nil, to = nil
      from = from.nil? ? Date::today : Date::parse(from)
      to = to.nil? ? from : Date::parse(to)
      user = match :user, api.users, user, :first_name, :last_name, :email
      project = match :project, api.projects, project, :name
      task = match :task, api.tasks(project), task, :name

      puts "Deleting timeslips for #{user.first_name} #{user.last_name} for task '#{task.name}' in project '#{project.name}' between #{from} and #{to} inclusive"
      api.timeslips(user: user, project: project, task: task, from: from, to: to).each do |timeslip|
        api.delete_timeslip(timeslip)
      end
    end
  end

  class Invoices < Thor
    no_commands do
      def api
        @api ||= API.new
      end

      def contacts
        @contacts ||= Hash.new {|cache, url| cache[url] = api.contact url.split('/').last }
      end

      def projects
        @projects ||= Hash.new {|cache, url| cache[url] = api.project url.split('/').last }
      end

      def human invoice
        [
          Date::parse(invoice.dated_on).strftime('%a %d %b %Y'),
          Date::parse(invoice.due_on).strftime('%a %d %b %Y'),
          invoice.contact_name,
          projects[invoice.project].name,
          invoice.reference,
          invoice.total_value,
          invoice.net_value,
        ].join("\t")
      end
    end

    STATUSES = %i[ all recent_open_or_overdue open overdue open_or_overdue draft paid scheduled_to_email thank_you_emails reminder_emails ]

    desc 'list [-C CONTACT] [-P PROJECT] [-S STATUS] [-f FROM] [-t TO]', "List invoices"
    method_option :contact, aliases: '-C', type: :string, default: nil, desc: "Limit to a contact, identified by name or email"
    method_option :project, aliases: '-P', type: :string, default: nil, desc: "Limit to a project, identified by name"
    method_option :status, aliases: '-S', type: :string, default: nil, desc: "Invoices that match a status, one of: #{STATUSES.join(', ')}"
    method_option :from, aliases: '-f', type: :string, default: nil, desc: 'Date to list invoices from'
    method_option :to, aliases: '-t', type: :string, default: nil, desc: 'Date to list invoices to'
    method_option :format, type: :string, default: 'human', desc: 'Output format, one of human or json'
    def list
      from = options[:from].nil? ? nil : Date::parse(options[:from])
      to = options[:to].nil? ? nil : Date::parse(options[:to])
      status = options[:status].nil? ? nil : match(:status, STATUSES, options[:status], :to_s)
      contact = options[:contact].nil? ? nil : match(:contact, api.contacts, options[:contact], :first_name, :last_name, :organisation_name, :email, :billing_email)
      project = options[:project].nil? ? nil : match(:project, api.projects, options[:project], :name)

      contacts[contact.url] = contact unless contact.nil?
      projects[project.url] = project unless project.nil?
      api.invoices(contact: contact, project: project, view: status).select do |invoice|
        from.nil? || Date::parse(invoice.dated_on) >= from
      end.each do |invoice|
        puts case options[:format].downcase
        when 'human'; human(invoice)
        when 'json'; invoice.to_json
        else raise ArgumentError, "unknown output format #{options[:format]}"
        end
      end
    end
  end

  class Command < Thor
    desc "timeslips", "Create, read, update and delete timeslips"
    subcommand "timeslips", Timeslips

    desc "invoices", "Create, read, update and delete invoices"
    subcommand "invoices", Invoices
  end
end

Freeagent::Command.start
